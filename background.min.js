!function () {
    "use strict";
    importScripts("bundle.js");
    const {
        auth: e,
        db: s,
        signInWithEmailAndPassword: t,
        createUserWithEmailAndPassword: r,
        sendPasswordResetEmail: a,
        onAuthStateChanged: n,
        doc: o,
        setDoc: c,
        getDoc: i,
        onSnapshot: u
    } = firebaseApp;
    let l, m = !1, d = null;
    n(e, (async e => {
        if (m = !1, e) {
            console.log("User signed in: ", e);
            const t = o(s, "users", e.uid);
            l = u(t, (e => {
                var s;
                e.exists() && (d = e.data(), m = !0, console.log("User data updated:", d), s = {
                    action: "userDataUpdated",
                    data: d
                }, chrome.runtime.sendMessage(s, (e => {
                    chrome.runtime.lastError
                })))
            }));
            (await i(t)).exists() || await c(t, {email: e.email, premiumExpires: null})
        } else console.log("No user signed in."), l && l(), d = null, m = !0
    })), chrome.runtime.onMessage.addListener(((n, i, u) => {
        if ("checkAuthState" === n.action) return async function () {
            return new Promise((e => {
                const s = () => {
                    m ? (console.log("Auth ready"), e()) : setTimeout(s, 10)
                };
                s()
            }))
        }().then((async () => {
            const s = e.currentUser;
            if (s) {
                const e = d.premiumExpires ? new Date(1e3 * d.premiumExpires.seconds) : new Date(1e3 * 9999),
                    t = d?.trialExpires ? new Date(1e3 * d.trialExpires.seconds) : new Date(1e3 * 9999), r = e && e > new Date,
                    a = t && t > new Date;
                u({success: !0, data: s, userData: d, isPremium: true, isTrialActive: true})
            // } else u({success: !0})
            } else u({success: !0})
        })), !0;
        if ("login" === n.action) {
            const {email: s, password: r} = n.data;
            return t(e, s, r).then((e => {
                u({success: !0, data: e.user})
            })).catch((e => {
                console.log(e), u({success: !1, error: e.message})
            })), !0
        }
        if ("signup" === n.action) {
            const {email: t, password: a} = n.data;
            return r(e, t, a).then((e => {
                const r = new Date;
                r.setDate(r.getDate() + 1), e.user.trialExpires = r;
                const a = o(s, "users", e.user.uid);
                c(a, {email: t, premiumExpires: null, trialExpires: r}).then((() => {
                    const s = new Date;
                    s.setDate(s.getDate() + 1), e.user.trialExpires = s, u({success: !0, data: e.user, trialExpires: s})
                })).catch((e => {
                    u({success: !1, error: e.message})
                }))
            })).catch((e => {
                u({success: !1, error: e.message})
            })), !0
        }
        if ("logout" === n.action) return e.signOut().then((() => {
            u({success: !0})
        })).catch((e => {
            u({success: !1, error: e.message})
        })), !0;
        if ("resetPassword" === n.action) {
            const {email: s} = n.data;
            return a(e, s).then((e => u({success: !0, data: e}))).catch((e => u({success: !1, error: e.message}))), !0
        }
    })), chrome.runtime.onInstalled.addListener((e => {
        if (e.reason === chrome.runtime.OnInstalledReason.INSTALL) chrome.tabs.create({url: chrome.runtime.getURL("welcome.html")}); else if (e.reason === chrome.runtime.OnInstalledReason.UPDATE) {
            const s = chrome.runtime.getManifest().version;
            console.log(s), 4.2 == e.previousVersion && (console.log("hello"), chrome.tabs.create({url: chrome.runtime.getURL("welcome.html")}))
        }
    })), chrome.runtime.onStartup.addListener((() => {
        console.log("onStartup()")
    }))
}();
